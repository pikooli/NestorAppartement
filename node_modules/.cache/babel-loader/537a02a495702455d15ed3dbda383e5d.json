{"ast":null,"code":"import { compareString } from \"../Compare\";\n\nfunction alreadyEntryInArray(newArray, searchValue, mainField, field) {\n  if (searchValue[mainField][field]) {\n    newArray = newArray.map(element => {\n      if (element && compareString(element[mainField][field], searchValue[mainField][field])) return element;\n      return null;\n    });\n  }\n\n  return newArray;\n}\n\nfunction NotEntryInArray(array, newArray, searchValue, mainField, field) {\n  if (searchValue[mainField][field]) {\n    newArray = array.map(element => {\n      if (element && compareString(element[mainField][field], searchValue[mainField][field])) return element;\n      return null;\n    });\n  }\n\n  if (newArray.length) return newArray;\n  return [];\n}\n\n_c = NotEntryInArray;\nexport function checkIfEntryInArrayWithMainField(array, newArray, searchValue, mainField, field) {\n  if (newArray && newArray.length) {\n    newArray = alreadyEntryInArray(newArray, searchValue, mainField, field);\n  } else newArray = NotEntryInArray(array, newArray, searchValue, mainField, field);\n\n  return newArray;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NotEntryInArray\");","map":{"version":3,"sources":["/Users/pascal/test/NestorAppartement/src/Utlis/SearchFunction/SearchwithMainField.js"],"names":["compareString","alreadyEntryInArray","newArray","searchValue","mainField","field","map","element","NotEntryInArray","array","length","checkIfEntryInArrayWithMainField"],"mappings":"AAAA,SAASA,aAAT,QAA8B,YAA9B;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,WAAvC,EAAoDC,SAApD,EAA+DC,KAA/D,EAAsE;AACpE,MAAIF,WAAW,CAACC,SAAD,CAAX,CAAuBC,KAAvB,CAAJ,EAAmC;AACjCH,IAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AACnC,UACEA,OAAO,IACPP,aAAa,CAACO,OAAO,CAACH,SAAD,CAAP,CAAmBC,KAAnB,CAAD,EAA4BF,WAAW,CAACC,SAAD,CAAX,CAAuBC,KAAvB,CAA5B,CAFf,EAIE,OAAOE,OAAP;AACF,aAAO,IAAP;AACD,KAPU,CAAX;AAQD;;AACD,SAAOL,QAAP;AACD;;AAED,SAASM,eAAT,CAAyBC,KAAzB,EAAgCP,QAAhC,EAA0CC,WAA1C,EAAuDC,SAAvD,EAAkEC,KAAlE,EAAyE;AACvE,MAAIF,WAAW,CAACC,SAAD,CAAX,CAAuBC,KAAvB,CAAJ,EAAmC;AACjCH,IAAAA,QAAQ,GAAGO,KAAK,CAACH,GAAN,CAAWC,OAAD,IAAa;AAChC,UACEA,OAAO,IACPP,aAAa,CAACO,OAAO,CAACH,SAAD,CAAP,CAAmBC,KAAnB,CAAD,EAA4BF,WAAW,CAACC,SAAD,CAAX,CAAuBC,KAAvB,CAA5B,CAFf,EAIE,OAAOE,OAAP;AACF,aAAO,IAAP;AACD,KAPU,CAAX;AAQD;;AACD,MAAIL,QAAQ,CAACQ,MAAb,EAAqB,OAAOR,QAAP;AACrB,SAAO,EAAP;AACD;;KAbQM,e;AAeT,OAAO,SAASG,gCAAT,CACLF,KADK,EAELP,QAFK,EAGLC,WAHK,EAILC,SAJK,EAKLC,KALK,EAML;AACA,MAAIH,QAAQ,IAAIA,QAAQ,CAACQ,MAAzB,EAAiC;AAC/BR,IAAAA,QAAQ,GAAGD,mBAAmB,CAACC,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,EAAmCC,KAAnC,CAA9B;AACD,GAFD,MAGEH,QAAQ,GAAGM,eAAe,CAACC,KAAD,EAAQP,QAAR,EAAkBC,WAAlB,EAA+BC,SAA/B,EAA0CC,KAA1C,CAA1B;;AACF,SAAOH,QAAP;AACD","sourcesContent":["import { compareString } from \"../Compare\";\n\nfunction alreadyEntryInArray(newArray, searchValue, mainField, field) {\n  if (searchValue[mainField][field]) {\n    newArray = newArray.map((element) => {\n      if (\n        element &&\n        compareString(element[mainField][field], searchValue[mainField][field])\n      )\n        return element;\n      return null;\n    });\n  }\n  return newArray;\n}\n\nfunction NotEntryInArray(array, newArray, searchValue, mainField, field) {\n  if (searchValue[mainField][field]) {\n    newArray = array.map((element) => {\n      if (\n        element &&\n        compareString(element[mainField][field], searchValue[mainField][field])\n      )\n        return element;\n      return null;\n    });\n  }\n  if (newArray.length) return newArray;\n  return [];\n}\n\nexport function checkIfEntryInArrayWithMainField(\n  array,\n  newArray,\n  searchValue,\n  mainField,\n  field\n) {\n  if (newArray && newArray.length) {\n    newArray = alreadyEntryInArray(newArray, searchValue, mainField, field);\n  } else\n    newArray = NotEntryInArray(array, newArray, searchValue, mainField, field);\n  return newArray;\n}\n"]},"metadata":{},"sourceType":"module"}