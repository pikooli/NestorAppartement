{"ast":null,"code":"import { compareString } from \"../../../../Utlis/Compare\";\n\nfunction alreadyEntryInArray(bookings, newArray, searchValue, field) {\n  if (searchValue.apartment[field]) {\n    newArray = newArray.map(element => {\n      if (element && compareString(element.room.apartment[field], searchValue.apartment[field])) return element;\n      return null;\n    });\n  }\n\n  return newArray;\n}\n\nfunction NotEntryInArray(bookings, newArray, searchValue, field) {\n  if (searchValue.apartment[field]) {\n    newArray = bookings.map(element => {\n      if (element && compareString(element.room.apartment[field], searchValue.apartment[field])) return element;\n      return null;\n    });\n  }\n\n  if (newArray.length) return newArray;\n  return [];\n}\n\n_c = NotEntryInArray;\n\nfunction checkIfEntryInArray(bookings, newArray, searchValue, field) {\n  if (newArray && newArray.length) {\n    newArray = alreadyEntryInArray(bookings, newArray, searchValue, field);\n  } else newArray = NotEntryInArray(bookings, newArray, searchValue, field);\n\n  return newArray;\n}\n\nexport function searchApartment(bookings, newArray, searchValue) {\n  if (searchValue.apartment) {\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"number\");\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"name\");\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"street\");\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"zipCode\");\n  }\n\n  return newArray;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NotEntryInArray\");","map":{"version":3,"sources":["/Users/pascal/test/NestorAppartement/src/Booking/Booking/SearchBooking/SearchAlgorithm/SearchApartmentAlgorithm.js"],"names":["compareString","alreadyEntryInArray","bookings","newArray","searchValue","field","apartment","map","element","room","NotEntryInArray","length","checkIfEntryInArray","searchApartment"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,QAAvC,EAAiDC,WAAjD,EAA8DC,KAA9D,EAAqE;AACnE,MAAID,WAAW,CAACE,SAAZ,CAAsBD,KAAtB,CAAJ,EAAkC;AAChCF,IAAAA,QAAQ,GAAGA,QAAQ,CAACI,GAAT,CAAcC,OAAD,IAAa;AACnC,UACEA,OAAO,IACPR,aAAa,CACXQ,OAAO,CAACC,IAAR,CAAaH,SAAb,CAAuBD,KAAvB,CADW,EAEXD,WAAW,CAACE,SAAZ,CAAsBD,KAAtB,CAFW,CAFf,EAOE,OAAOG,OAAP;AACF,aAAO,IAAP;AACD,KAVU,CAAX;AAWD;;AACD,SAAOL,QAAP;AACD;;AAED,SAASO,eAAT,CAAyBR,QAAzB,EAAmCC,QAAnC,EAA6CC,WAA7C,EAA0DC,KAA1D,EAAiE;AAC/D,MAAID,WAAW,CAACE,SAAZ,CAAsBD,KAAtB,CAAJ,EAAkC;AAChCF,IAAAA,QAAQ,GAAGD,QAAQ,CAACK,GAAT,CAAcC,OAAD,IAAa;AACnC,UACEA,OAAO,IACPR,aAAa,CACXQ,OAAO,CAACC,IAAR,CAAaH,SAAb,CAAuBD,KAAvB,CADW,EAEXD,WAAW,CAACE,SAAZ,CAAsBD,KAAtB,CAFW,CAFf,EAOE,OAAOG,OAAP;AACF,aAAO,IAAP;AACD,KAVU,CAAX;AAWD;;AACD,MAAIL,QAAQ,CAACQ,MAAb,EAAqB,OAAOR,QAAP;AACrB,SAAO,EAAP;AACD;;KAhBQO,e;;AAkBT,SAASE,mBAAT,CAA6BV,QAA7B,EAAuCC,QAAvC,EAAiDC,WAAjD,EAA8DC,KAA9D,EAAqE;AACnE,MAAIF,QAAQ,IAAIA,QAAQ,CAACQ,MAAzB,EAAiC;AAC/BR,IAAAA,QAAQ,GAAGF,mBAAmB,CAACC,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCC,KAAlC,CAA9B;AACD,GAFD,MAEOF,QAAQ,GAAGO,eAAe,CAACR,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkCC,KAAlC,CAA1B;;AACP,SAAOF,QAAP;AACD;;AAED,OAAO,SAASU,eAAT,CAAyBX,QAAzB,EAAmCC,QAAnC,EAA6CC,WAA7C,EAA0D;AAC/D,MAAIA,WAAW,CAACE,SAAhB,EAA2B;AACzBH,IAAAA,QAAQ,GAAGS,mBAAmB,CAACV,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkC,QAAlC,CAA9B;AACAD,IAAAA,QAAQ,GAAGS,mBAAmB,CAACV,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkC,MAAlC,CAA9B;AACAD,IAAAA,QAAQ,GAAGS,mBAAmB,CAACV,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkC,QAAlC,CAA9B;AACAD,IAAAA,QAAQ,GAAGS,mBAAmB,CAACV,QAAD,EAAWC,QAAX,EAAqBC,WAArB,EAAkC,SAAlC,CAA9B;AACD;;AACD,SAAOD,QAAP;AACD","sourcesContent":["import { compareString } from \"../../../../Utlis/Compare\";\n\nfunction alreadyEntryInArray(bookings, newArray, searchValue, field) {\n  if (searchValue.apartment[field]) {\n    newArray = newArray.map((element) => {\n      if (\n        element &&\n        compareString(\n          element.room.apartment[field],\n          searchValue.apartment[field]\n        )\n      )\n        return element;\n      return null;\n    });\n  }\n  return newArray;\n}\n\nfunction NotEntryInArray(bookings, newArray, searchValue, field) {\n  if (searchValue.apartment[field]) {\n    newArray = bookings.map((element) => {\n      if (\n        element &&\n        compareString(\n          element.room.apartment[field],\n          searchValue.apartment[field]\n        )\n      )\n        return element;\n      return null;\n    });\n  }\n  if (newArray.length) return newArray;\n  return [];\n}\n\nfunction checkIfEntryInArray(bookings, newArray, searchValue, field) {\n  if (newArray && newArray.length) {\n    newArray = alreadyEntryInArray(bookings, newArray, searchValue, field);\n  } else newArray = NotEntryInArray(bookings, newArray, searchValue, field);\n  return newArray;\n}\n\nexport function searchApartment(bookings, newArray, searchValue) {\n  if (searchValue.apartment) {\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"number\");\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"name\");\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"street\");\n    newArray = checkIfEntryInArray(bookings, newArray, searchValue, \"zipCode\");\n  }\n  return newArray;\n}\n"]},"metadata":{},"sourceType":"module"}