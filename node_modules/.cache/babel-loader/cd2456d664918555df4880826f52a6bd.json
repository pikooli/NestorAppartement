{"ast":null,"code":"import { compareString } from \"../Compare\";\n\nfunction alreadyEntryInArray(newArray, searchValue, field) {\n  if (searchValue[field]) {\n    newArray = newArray.map(element => {\n      if (element && compareString(element[field], searchValue[field])) return element;\n      return null;\n    });\n  }\n\n  return newArray;\n}\n\nfunction NotEntryInArray(array, newArray, searchValue, field) {\n  if (searchValue[field]) {\n    newArray = array.map(element => {\n      if (element && compareString(element[field], searchValue[field])) return element;\n      return null;\n    });\n  }\n\n  if (newArray.length) return newArray;\n  return [];\n}\n\n_c = NotEntryInArray;\nexport function checkIfEntryInArrayWithoutMainField(array, newArray, searchValue, field) {\n  if (newArray && newArray.length) {\n    newArray = alreadyEntryInArray(newArray, searchValue, field);\n  } else newArray = NotEntryInArray(array, newArray, searchValue, field);\n\n  return newArray;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"NotEntryInArray\");","map":{"version":3,"sources":["/Users/pascal/test/NestorAppartement/src/Utlis/SearchFunction/SearchWithoutMainField.js"],"names":["compareString","alreadyEntryInArray","newArray","searchValue","field","map","element","NotEntryInArray","array","length","checkIfEntryInArrayWithoutMainField"],"mappings":"AAAA,SAASA,aAAT,QAA8B,YAA9B;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,WAAvC,EAAoDC,KAApD,EAA2D;AACzD,MAAID,WAAW,CAACC,KAAD,CAAf,EAAwB;AACtBF,IAAAA,QAAQ,GAAGA,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAa;AACnC,UAAIA,OAAO,IAAIN,aAAa,CAACM,OAAO,CAACF,KAAD,CAAR,EAAiBD,WAAW,CAACC,KAAD,CAA5B,CAA5B,EACE,OAAOE,OAAP;AACF,aAAO,IAAP;AACD,KAJU,CAAX;AAKD;;AACD,SAAOJ,QAAP;AACD;;AAED,SAASK,eAAT,CAAyBC,KAAzB,EAAgCN,QAAhC,EAA0CC,WAA1C,EAAuDC,KAAvD,EAA8D;AAC5D,MAAID,WAAW,CAACC,KAAD,CAAf,EAAwB;AACtBF,IAAAA,QAAQ,GAAGM,KAAK,CAACH,GAAN,CAAWC,OAAD,IAAa;AAChC,UAAIA,OAAO,IAAIN,aAAa,CAACM,OAAO,CAACF,KAAD,CAAR,EAAiBD,WAAW,CAACC,KAAD,CAA5B,CAA5B,EACE,OAAOE,OAAP;AACF,aAAO,IAAP;AACD,KAJU,CAAX;AAKD;;AACD,MAAIJ,QAAQ,CAACO,MAAb,EAAqB,OAAOP,QAAP;AACrB,SAAO,EAAP;AACD;;KAVQK,e;AAYT,OAAO,SAASG,mCAAT,CACLF,KADK,EAELN,QAFK,EAGLC,WAHK,EAILC,KAJK,EAKL;AACA,MAAIF,QAAQ,IAAIA,QAAQ,CAACO,MAAzB,EAAiC;AAC/BP,IAAAA,QAAQ,GAAGD,mBAAmB,CAACC,QAAD,EAAWC,WAAX,EAAwBC,KAAxB,CAA9B;AACD,GAFD,MAEOF,QAAQ,GAAGK,eAAe,CAACC,KAAD,EAAQN,QAAR,EAAkBC,WAAlB,EAA+BC,KAA/B,CAA1B;;AACP,SAAOF,QAAP;AACD","sourcesContent":["import { compareString } from \"../Compare\";\n\nfunction alreadyEntryInArray(newArray, searchValue, field) {\n  if (searchValue[field]) {\n    newArray = newArray.map((element) => {\n      if (element && compareString(element[field], searchValue[field]))\n        return element;\n      return null;\n    });\n  }\n  return newArray;\n}\n\nfunction NotEntryInArray(array, newArray, searchValue, field) {\n  if (searchValue[field]) {\n    newArray = array.map((element) => {\n      if (element && compareString(element[field], searchValue[field]))\n        return element;\n      return null;\n    });\n  }\n  if (newArray.length) return newArray;\n  return [];\n}\n\nexport function checkIfEntryInArrayWithoutMainField(\n  array,\n  newArray,\n  searchValue,\n  field\n) {\n  if (newArray && newArray.length) {\n    newArray = alreadyEntryInArray(newArray, searchValue, field);\n  } else newArray = NotEntryInArray(array, newArray, searchValue, field);\n  return newArray;\n}\n"]},"metadata":{},"sourceType":"module"}